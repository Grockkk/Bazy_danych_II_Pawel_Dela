
--1 Zaimportuj następujące pliki shapefile do bazy, przyjmij wszędzie układ WGS84:
--Znajdź budynki, które zostały wybudowane lub wyremontowane na przestrzeni roku (zmiana
--pomiędzy 2018 a 2019)
CREATE TABLE buildingsNew AS(
SELECT DISTINCT T2019_KAR_BUILDINGS.* 
FROM T2019_KAR_BUILDINGS LEFT JOIN T2018_KAR_BUILDINGS ON T2019_KAR_BUILDINGS.geom = T2018_KAR_BUILDINGS.geom
WHERE T2018_KAR_BUILDINGS.geom IS NULL
);


SELECT geom FROM buildingsNew
DROP TABLE buildingsNew
--2 Znajdź ile nowych POI pojawiło się w promieniu 500 m od wyremontowanych lub
--wybudowanych budynków, które znalezione zostały w zadaniu 1. Policz je wg ich kategorii.

SELECT T2019_KAR_POI_TABLE.type AS typ_obiektu ,COUNT(DISTINCT T2019_KAR_POI_TABLE.*) AS liczba_obiektow
FROM buildingsNew,T2019_KAR_POI_TABLE LEFT JOIN T2018_KAR_POI_TABLE ON T2019_KAR_POI_TABLE.geom = T2018_KAR_POI_TABLE.geom
WHERE T2018_KAR_POI_TABLE.geom IS NULL
AND ST_Intersects(ST_Buffer(buildingsNew.geom,500),T2019_KAR_POI_TABLE.geom)
GROUP BY T2019_KAR_POI_TABLE.type

--3 Utwórz nową tabelę o nazwie ‘streets_reprojected’, która zawierać będzie dane z tabeli
--T2019_KAR_STREETS przetransformowane do układu współrzędnych DHDN.Berlin/Cassini (3068).
CREATE TABLE  streets_reprojected AS(
SELECT gid,link_id,st_name,ref_in_id,nref_in_id,func_class,speed_cat,fr_speed_l,to_speed_l,dir_travel,ST_SetSRID(geom,3068) FROM T2019_KAR_STREETS
);
SELECT * FROM T2019_KAR_STREETS
--Pan mowił żeby uzyc ST_Transform ale to nie działa bo nie ma układu nadanego

DROP TABLE streets_reprojected;

--4 Stwórz tabelę o nazwie ‘input_points’ i dodaj do niej dwa rekordy o geometrii punktowej.
--Użyj następujących współrzędnych:
--X Y
--8.36093 49.03174
--8.39876 49.00644
--Przyjmij układ współrzędnych GPS(WGS84).

CREATE TABLE  input_points (
	id INT PRIMARY KEY,
	geom GEOMETRY,
	name VARCHAR (10)
);
INSERT INTO input_points VALUES
(1,ST_GeomFromText('POINT(8.36093 49.03174)',4326),'X'),
(2,ST_GeomFromText('POINT(8.39876 49.00644)',4326),'Y');
SELECT * FROM input_points;

DROP TABLE input_points

SELECT ST_AsText(input_points.geom) FROM input_points;
--5 Zaktualizuj dane w tabeli ‘input_points’ tak, aby punkty te były w układzie współrzędnych
--DHDN.Berlin/Cassini. Wyświetl współrzędne za pomocą funkcji ST_AsText().

UPDATE input_points
SET geom = ST_Transform(input_points.geom,3068)

SELECT ST_AsText(input_points.geom) AS geom_point FROM input_points

--6 Znajdź wszystkie skrzyżowania, które znajdują się w odległości 200 m od linii zbudowanej
--z punktów w tabeli ‘input_points’. Wykorzystaj tabelę T2019_STREET_NODE. Dokonaj
--reprojekcji geometrii, aby była zgodna z resztą tabel.

SELECT * FROM t2019_kar_street_node
WHERE ST_Contains(ST_Buffer((SELECT ST_MakeLine(geom) FROM input_points),200),ST_SetSRID(geom,3068))


--7 Policz jak wiele sklepów sportowych (‘Sporting Goods Store’ - tabela POIs) znajduje się
--w odległości 300 m od parków (LAND_USE_A).
SELECT COUNT(t2019_kar_poi_table.type) AS sum FROM t2019_kar_poi_table,t2019_kar_land_use_a
	WHERE t2019_kar_poi_table.type = 'Sporting Goods Store' AND t2019_kar_land_use_a.type = 'Park (City/County)'
	AND ST_Contains(ST_Buffer(t2019_kar_land_use_a.geom,300),t2019_kar_poi_table.geom)



-- 8 Znajdź punkty przecięcia torów kolejowych (RAILWAYS) z ciekami (WATER_LINES). Zapisz
--znalezioną geometrię do osobnej tabeli o nazwie ‘T2019_KAR_BRIDGES’


CREATE TABLE T2019_KAR_BRIDGES AS(
SELECT ST_Intersection(t2019_kar_water_lines.geom , t2019_kar_railways.geom) FROM t2019_kar_water_lines, t2019_kar_railways
	WHERE ST_Intersects(t2019_kar_water_lines.geom,t2019_kar_railways.geom)
);

SELECT * FROM T2019_KAR_BRIDGES

DROP TABLE T2019_KAR_BRIDGES





















SELECT * FROM t2019_kar_water_lines

SELECT * FROM t2019_kar_buildings ORDER BY polygon_id
-- 4326
SELECT * FROM t2018_kar_poi_table
SELECT * FROM t2019_kar_poi_table



---------------------------------------------------------------------------------

